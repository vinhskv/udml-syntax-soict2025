package UDML.core.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Aggregation;
  private ConceptPresentation props_Annotable;
  private ConceptPresentation props_Annotation;
  private ConceptPresentation props_Association;
  private ConceptPresentation props_Class;
  private ConceptPresentation props_Classifier;
  private ConceptPresentation props_Composition;
  private ConceptPresentation props_Concern;
  private ConceptPresentation props_DataType;
  private ConceptPresentation props_DomainModel;
  private ConceptPresentation props_Enumeration;
  private ConceptPresentation props_Generalization;
  private ConceptPresentation props_MemberEnd;
  private ConceptPresentation props_Operation;
  private ConceptPresentation props_Package;
  private ConceptPresentation props_Parameter;
  private ConceptPresentation props_PrimitiveType;
  private ConceptPresentation props_Property;
  private ConceptPresentation props_RefAnnotation;
  private ConceptPresentation props_RelationShip;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Aggregation:
        if (props_Aggregation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Aggregation = cpb.create();
        }
        return props_Aggregation;
      case LanguageConceptSwitch.Annotable:
        if (props_Annotable == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Annotable = cpb.create();
        }
        return props_Annotable;
      case LanguageConceptSwitch.Annotation:
        if (props_Annotation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Annotation = cpb.create();
        }
        return props_Annotation;
      case LanguageConceptSwitch.Association:
        if (props_Association == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Association = cpb.create();
        }
        return props_Association;
      case LanguageConceptSwitch.Class:
        if (props_Class == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Class = cpb.create();
        }
        return props_Class;
      case LanguageConceptSwitch.Classifier:
        if (props_Classifier == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Classifier = cpb.create();
        }
        return props_Classifier;
      case LanguageConceptSwitch.Composition:
        if (props_Composition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Composition = cpb.create();
        }
        return props_Composition;
      case LanguageConceptSwitch.Concern:
        if (props_Concern == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Concern = cpb.create();
        }
        return props_Concern;
      case LanguageConceptSwitch.DataType:
        if (props_DataType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_DataType = cpb.create();
        }
        return props_DataType;
      case LanguageConceptSwitch.DomainModel:
        if (props_DomainModel == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_DomainModel = cpb.create();
        }
        return props_DomainModel;
      case LanguageConceptSwitch.Enumeration:
        if (props_Enumeration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Enumeration = cpb.create();
        }
        return props_Enumeration;
      case LanguageConceptSwitch.Generalization:
        if (props_Generalization == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Generalization");
          props_Generalization = cpb.create();
        }
        return props_Generalization;
      case LanguageConceptSwitch.MemberEnd:
        if (props_MemberEnd == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_MemberEnd = cpb.create();
        }
        return props_MemberEnd;
      case LanguageConceptSwitch.Operation:
        if (props_Operation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Operation = cpb.create();
        }
        return props_Operation;
      case LanguageConceptSwitch.Package:
        if (props_Package == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Package = cpb.create();
        }
        return props_Package;
      case LanguageConceptSwitch.Parameter:
        if (props_Parameter == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Parameter = cpb.create();
        }
        return props_Parameter;
      case LanguageConceptSwitch.PrimitiveType:
        if (props_PrimitiveType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_PrimitiveType = cpb.create();
        }
        return props_PrimitiveType;
      case LanguageConceptSwitch.Property:
        if (props_Property == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Property = cpb.create();
        }
        return props_Property;
      case LanguageConceptSwitch.RefAnnotation:
        if (props_RefAnnotation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xfd381d931dce4228L, 0xba53a4e0ecaf0da2L, 0x1802c6e79a24c14fL, 0x1802c6e79a24c25bL, "Annotation", "", "");
          props_RefAnnotation = cpb.create();
        }
        return props_RefAnnotation;
      case LanguageConceptSwitch.RelationShip:
        if (props_RelationShip == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_RelationShip = cpb.create();
        }
        return props_RelationShip;
    }
    return null;
  }
}
