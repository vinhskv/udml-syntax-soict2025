package UDML.core.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.menus.substitute.SubstituteMenuBase;
import jetbrains.mps.lang.editor.menus.EditorMenuDescriptorBase;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.annotations.NotNull;
import java.util.List;
import jetbrains.mps.lang.editor.menus.MenuPart;
import jetbrains.mps.openapi.editor.menus.substitute.SubstituteMenuItem;
import jetbrains.mps.openapi.editor.menus.substitute.SubstituteMenuContext;
import java.util.ArrayList;
import jetbrains.mps.lang.editor.menus.ConceptMenusPart;
import java.util.Collection;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.stream.Collectors;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.editor.menus.substitute.DefaultSubstituteMenuLookup;
import jetbrains.mps.smodel.language.LanguageRegistry;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SConcept;

public class Annotable_SubstituteMenu extends SubstituteMenuBase {
  public Annotable_SubstituteMenu() {
    super(false, new EditorMenuDescriptorBase("default substitute menu for " + "Annotable", new SNodePointer("r:e3c41fb0-4903-4b44-85cc-912b76fe0420(UDML.core.editor)", "9069817326575208500")));
  }
  @NotNull
  @Override
  protected List<MenuPart<SubstituteMenuItem, SubstituteMenuContext>> getParts(final SubstituteMenuContext _context) {
    List<MenuPart<SubstituteMenuItem, SubstituteMenuContext>> result = new ArrayList<MenuPart<SubstituteMenuItem, SubstituteMenuContext>>();
    result.add(new SMP_Subconcepts_8yv26k_a());
    return result;
  }

  public class SMP_Subconcepts_8yv26k_a extends ConceptMenusPart<SubstituteMenuItem, SubstituteMenuContext> {
    public SMP_Subconcepts_8yv26k_a() {
      super(new EditorMenuDescriptorBase("include menus for all the direct subconcepts of " + "Annotable", new SNodePointer("r:e3c41fb0-4903-4b44-85cc-912b76fe0420(UDML.core.editor)", "6409914354156401186")));
    }

    @Override
    protected Collection<SAbstractConcept> getConcepts(final SubstituteMenuContext _context) {
      return getDirectDescendants(_context, CONCEPTS.Annotable$64).stream().filter((SAbstractConcept concept) -> filterConcept(_context, concept)).collect(Collectors.toList());
    }
    private boolean filterConcept(SubstituteMenuContext _context, SAbstractConcept concept) {
      if (SConceptOperations.isExactly(SNodeOperations.asSConcept(concept), CONCEPTS.Operation$He) || SConceptOperations.isExactly(SNodeOperations.asSConcept(concept), CONCEPTS.Property$GJ)) {
        return false;
      }
      if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(concept), CONCEPTS.Annotation$hG)) {
        return false;
      }
      return true;
    }

    @Override
    protected Collection<SubstituteMenuItem> createItemsForConcept(SubstituteMenuContext context, SAbstractConcept concept) {
      return context.createItems(new DefaultSubstituteMenuLookup(LanguageRegistry.getInstance(context.getEditorContext().getRepository()), concept));
    }
  }

  private static final class CONCEPTS {
    /*package*/ static final SInterfaceConcept Annotable$64 = MetaAdapterFactory.getInterfaceConcept(0xfd381d931dce4228L, 0xba53a4e0ecaf0da2L, 0x49e02d1c64bbe822L, "UDML.core.structure.Annotable");
    /*package*/ static final SConcept Property$GJ = MetaAdapterFactory.getConcept(0xfd381d931dce4228L, 0xba53a4e0ecaf0da2L, 0x49e02d1c64bbef86L, "UDML.core.structure.Property");
    /*package*/ static final SConcept Operation$He = MetaAdapterFactory.getConcept(0xfd381d931dce4228L, 0xba53a4e0ecaf0da2L, 0x49e02d1c64bbef87L, "UDML.core.structure.Operation");
    /*package*/ static final SInterfaceConcept Annotation$hG = MetaAdapterFactory.getInterfaceConcept(0xfd381d931dce4228L, 0xba53a4e0ecaf0da2L, 0x49e02d1c64bbe825L, "UDML.core.structure.Annotation");
  }
}
