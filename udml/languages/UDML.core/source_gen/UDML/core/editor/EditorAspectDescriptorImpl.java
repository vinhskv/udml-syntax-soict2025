package UDML.core.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorComponent;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new Annotation_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new Class_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new Concern_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new DomainModel_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new Enumeration_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new Generalization_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new MemberEnd_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new Operation_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new Package_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new Parameter_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new PrimitiveType_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new Property_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new RefAnnotation_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new RelationShip_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }
  private Collection<ConceptEditorComponent> getDeclaredEC_0(String editorComponentId) {
    if ("UDML.core.editor.Annotable".equals(editorComponentId)) {
      return Collections.singletonList(new Annotable());
    }
    return Collections.emptyList();
  }
  private Collection<ConceptEditorComponent> getDeclaredEC_1(String editorComponentId) {
    switch (editorComponentId) {
      case "UDML.core.editor.ClassifierGen":
        return Collections.singletonList(new ClassifierGen());
      case "UDML.core.editor.ClassifierName":
        return Collections.singletonList(new ClassifierName());
    }
    return Collections.emptyList();
  }
  @NotNull
  public Collection<ConceptEditorComponent> getDeclaredEditorComponents(SAbstractConcept concept, String editorComponentId) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex1.index(cncpt)) {
      case 0:
        return getDeclaredEC_0(editorComponentId);
      case 1:
        return getDeclaredEC_1(editorComponentId);
      default:
    }
    return Collections.emptyList();
  }


  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredDefaultSubstituteMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex2.index(cncpt)) {
      case 0:
        return Collections.<SubstituteMenu>singletonList(new Annotable_SubstituteMenu());
      case 1:
        return Collections.<SubstituteMenu>singletonList(new Annotation_SubstituteMenu());
      case 2:
        return Collections.<SubstituteMenu>singletonList(new MemberEnd_SubstituteMenu());
      case 3:
        return Collections.<SubstituteMenu>singletonList(new Parameter_SubstituteMenu());
      case 4:
        return Collections.<SubstituteMenu>singletonList(new Property_SubstituteMenu());
      case 5:
        return Collections.<SubstituteMenu>singletonList(new RefAnnotation_SubstituteMenu());
      default:
    }
    return Collections.<SubstituteMenu>emptyList();
  }

  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xfd381d931dce4228L, 0xba53a4e0ecaf0da2L, 0x49e02d1c64bbe825L), MetaIdFactory.conceptId(0xfd381d931dce4228L, 0xba53a4e0ecaf0da2L, 0x49e02d1c64bbef7fL), MetaIdFactory.conceptId(0xfd381d931dce4228L, 0xba53a4e0ecaf0da2L, 0x49e02d1c64bbe82cL), MetaIdFactory.conceptId(0xfd381d931dce4228L, 0xba53a4e0ecaf0da2L, 0x49e02d1c64bbe830L), MetaIdFactory.conceptId(0xfd381d931dce4228L, 0xba53a4e0ecaf0da2L, 0x49e02d1c64bbefa7L), MetaIdFactory.conceptId(0xfd381d931dce4228L, 0xba53a4e0ecaf0da2L, 0x49e02d1c64bbef75L), MetaIdFactory.conceptId(0xfd381d931dce4228L, 0xba53a4e0ecaf0da2L, 0x3a10628a5a4433cdL), MetaIdFactory.conceptId(0xfd381d931dce4228L, 0xba53a4e0ecaf0da2L, 0x49e02d1c64bbef87L), MetaIdFactory.conceptId(0xfd381d931dce4228L, 0xba53a4e0ecaf0da2L, 0x49e02d1c64bbef7aL), MetaIdFactory.conceptId(0xfd381d931dce4228L, 0xba53a4e0ecaf0da2L, 0x49e02d1c64bbef94L), MetaIdFactory.conceptId(0xfd381d931dce4228L, 0xba53a4e0ecaf0da2L, 0x49e02d1c64bbefa8L), MetaIdFactory.conceptId(0xfd381d931dce4228L, 0xba53a4e0ecaf0da2L, 0x49e02d1c64bbef86L), MetaIdFactory.conceptId(0xfd381d931dce4228L, 0xba53a4e0ecaf0da2L, 0x1802c6e79a24c14fL), MetaIdFactory.conceptId(0xfd381d931dce4228L, 0xba53a4e0ecaf0da2L, 0x7dde76cdf7e6f65bL)).seal();
  private static final ConceptSwitchIndex conceptIndex1 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xfd381d931dce4228L, 0xba53a4e0ecaf0da2L, 0x49e02d1c64bbe822L), MetaIdFactory.conceptId(0xfd381d931dce4228L, 0xba53a4e0ecaf0da2L, 0x49e02d1c64bbe834L)).seal();
  private static final ConceptSwitchIndex conceptIndex2 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xfd381d931dce4228L, 0xba53a4e0ecaf0da2L, 0x49e02d1c64bbe822L), MetaIdFactory.conceptId(0xfd381d931dce4228L, 0xba53a4e0ecaf0da2L, 0x49e02d1c64bbe825L), MetaIdFactory.conceptId(0xfd381d931dce4228L, 0xba53a4e0ecaf0da2L, 0x3a10628a5a4433cdL), MetaIdFactory.conceptId(0xfd381d931dce4228L, 0xba53a4e0ecaf0da2L, 0x49e02d1c64bbef94L), MetaIdFactory.conceptId(0xfd381d931dce4228L, 0xba53a4e0ecaf0da2L, 0x49e02d1c64bbef86L), MetaIdFactory.conceptId(0xfd381d931dce4228L, 0xba53a4e0ecaf0da2L, 0x1802c6e79a24c14fL)).seal();
}
