package UDML.dcsl.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_AnnotationDcsl;
  private ConceptPresentation props_Associate;
  private ConceptPresentation props_ConcernDCSL;
  private ConceptPresentation props_DAssoc;
  private ConceptPresentation props_DAttr;
  private ConceptPresentation props_DClass;
  private ConceptPresentation props_DOpt;
  private ConceptPresentation props_DomainModelDcsl;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AnnotationDcsl:
        if (props_AnnotationDcsl == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_AnnotationDcsl = cpb.create();
        }
        return props_AnnotationDcsl;
      case LanguageConceptSwitch.Associate:
        if (props_Associate == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Associate");
          props_Associate = cpb.create();
        }
        return props_Associate;
      case LanguageConceptSwitch.ConcernDCSL:
        if (props_ConcernDCSL == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ConcernDCSL = cpb.create();
        }
        return props_ConcernDCSL;
      case LanguageConceptSwitch.DAssoc:
        if (props_DAssoc == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_DAssoc = cpb.create();
        }
        return props_DAssoc;
      case LanguageConceptSwitch.DAttr:
        if (props_DAttr == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_DAttr = cpb.create();
        }
        return props_DAttr;
      case LanguageConceptSwitch.DClass:
        if (props_DClass == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_DClass = cpb.create();
        }
        return props_DClass;
      case LanguageConceptSwitch.DOpt:
        if (props_DOpt == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_DOpt = cpb.create();
        }
        return props_DOpt;
      case LanguageConceptSwitch.DomainModelDcsl:
        if (props_DomainModelDcsl == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_DomainModelDcsl = cpb.create();
        }
        return props_DomainModelDcsl;
    }
    return null;
  }
}
