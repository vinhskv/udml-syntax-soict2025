package UDML.diagram.editor;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.descriptor.AbstractEditorBuilder;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Vertical;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import de.itemis.mps.editor.diagram.runtime.model.EditorCell_DiagramElement;
import de.itemis.mps.editor.diagram.runtime.ContextVariables;
import de.itemis.mps.editor.diagram.runtime.model.SNodeEdgeAccessor;
import de.itemis.mps.editor.diagram.runtime.model.EndpointUtil;
import de.itemis.mps.editor.diagram.runtime.DiagramUtil;
import de.itemis.mps.editor.diagram.runtime.shape.IShape;
import de.itemis.mps.editor.diagram.runtime.model.IConnectionEndpointReference;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import de.itemis.mps.editor.diagram.runtime.model.IConnectionEndpoint_Internal;
import de.itemis.mps.editor.diagram.runtime.model.Box;
import java.util.List;
import de.itemis.mps.editor.diagram.runtime.model.IDiagramElementAccessor;
import de.itemis.mps.editor.diagram.runtime.model.IAccessorFactory;
import java.util.ArrayList;
import de.itemis.mps.editor.diagram.runtime.jgraph.MyGraph;
import de.itemis.mps.editor.diagram.runtime.jgraph.DiagramCreationContext;
import de.itemis.mps.editor.diagram.runtime.jgraph.ElkLayouter;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.openapi.editor.menus.transformation.SPropertyInfo;
import jetbrains.mps.nodeEditor.cells.EditorCell_Property;
import jetbrains.mps.nodeEditor.cells.SPropertyAccessor;
import jetbrains.mps.nodeEditor.cellMenu.SPropertySubstituteInfo;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.util.Objects;
import jetbrains.mps.lang.core.behavior.PropertyAttribute__BehaviorDescriptor;
import jetbrains.mps.nodeEditor.EditorManager;
import jetbrains.mps.openapi.editor.update.AttributeKind;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;
import org.jetbrains.mps.openapi.language.SConcept;

/*package*/ class RelationShip_AsDiagram_EditorBuilder_a extends AbstractEditorBuilder {
  @NotNull
  private SNode myNode;

  public RelationShip_AsDiagram_EditorBuilder_a(@NotNull EditorContext context, @NotNull SNode node) {
    super(context);
    myNode = node;
  }

  @NotNull
  @Override
  public SNode getNode() {
    return myNode;
  }

  /*package*/ EditorCell createCell() {
    return createCollection_0();
  }

  private EditorCell createCollection_0() {
    EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Vertical());
    editorCell.setCellId("Collection_ev57ah_a");
    editorCell.setBig(true);
    setCellContext(editorCell);
    editorCell.addEditorCell(createDiagramConnector_1());
    return editorCell;
  }
  private EditorCell createDiagramConnector_0(final EditorContext editorContext, final SNode node) {

    final Wrappers._T<EditorCell_DiagramElement> diagramCell = new Wrappers._T<EditorCell_DiagramElement>(null);

    ContextVariables.withValue("thisNode", node, () -> {
      final ContextVariables _variablesContext = ContextVariables.getCurrent();
      SNodeEdgeAccessor accessor = new SNodeEdgeAccessor(node, EndpointUtil.createAccessorKeyForSNode(((SNode) _variablesContext.getValue("thisNode")))) {
        private EditorCell startRoleCell = DiagramUtil.getCellIfNotEmpty(null);
        private EditorCell endRoleCell = DiagramUtil.getCellIfNotEmpty(null);
        private IShape endShape = null;
        private IShape startShape = null;

        private IConnectionEndpointReference endpointFrom = EndpointUtil.createEndpointReferenceForNodeSafe(SNodeOperations.as(SLinkOperations.getTarget(SLinkOperations.getTarget(((SNode) _variablesContext.getValue("thisNode")), LINKS.MemberEndSource$ycMx), LINKS.MemberEnd$addv), CONCEPTS.Classifier$z8));
        private IConnectionEndpointReference endpointTo = EndpointUtil.createEndpointReferenceForNodeSafe(SNodeOperations.as(SLinkOperations.getTarget(SLinkOperations.getTarget(((SNode) _variablesContext.getValue("thisNode")), LINKS.MemberEndTarget$yd1y), LINKS.MemberEnd$addv), CONCEPTS.Classifier$z8));

        {
          boolean reverse = false;
          if (reverse) {

            {
              Tuples._2<IConnectionEndpointReference, IConnectionEndpointReference> _tmp_sqbq6d_b0b0i0a0a1a2a3a9 = MultiTuple.<IConnectionEndpointReference,IConnectionEndpointReference>from(endpointTo, endpointFrom);
              endpointFrom = _tmp_sqbq6d_b0b0i0a0a1a2a3a9._0();
              endpointTo = _tmp_sqbq6d_b0b0i0a0a1a2a3a9._1();
            }
            {
              Tuples._2<EditorCell, EditorCell> _tmp_sqbq6d_c0b0i0a0a1a2a3a9 = MultiTuple.<EditorCell,EditorCell>from(endRoleCell, startRoleCell);
              startRoleCell = _tmp_sqbq6d_c0b0i0a0a1a2a3a9._0();
              endRoleCell = _tmp_sqbq6d_c0b0i0a0a1a2a3a9._1();
            }
            {
              Tuples._2<IShape, IShape> _tmp_sqbq6d_d0b0i0a0a1a2a3a9 = MultiTuple.<IShape,IShape>from(endShape, startShape);
              startShape = _tmp_sqbq6d_d0b0i0a0a1a2a3a9._0();
              endShape = _tmp_sqbq6d_d0b0i0a0a1a2a3a9._1();
            }
          }
        }

        @Override
        public void writeFrom(IConnectionEndpoint_Internal endpoint) {
          writeFrom(EndpointUtil.getSNode(endpoint), EndpointUtil.getBox(endpoint), EndpointUtil.getPortName(endpoint));
        }
        public void writeFrom(final SNode targetNode, Box targetDNode, final String port) {
        }
        @Override
        public void writeTo(IConnectionEndpoint_Internal endpoint) {
          writeTo(EndpointUtil.getSNode(endpoint), EndpointUtil.getBox(endpoint), EndpointUtil.getPortName(endpoint));
        }
        public void writeTo(final SNode targetNode, Box targetDNode, final String port) {
        }

        @Override
        public IConnectionEndpointReference readFrom() {
          return endpointFrom;
        }
        @Override
        public IConnectionEndpointReference readTo() {
          return endpointTo;
        }
        @Override
        public EditorCell getEndRoleCell() {
          return endRoleCell;
        }
        public IShape getEndShape() {
          return endShape;
        }
        @Override
        public EditorCell getStartRoleCell() {
          return startRoleCell;
        }
        public IShape getStartShape() {
          return startShape;
        }

        public List<? extends IDiagramElementAccessor> getElements(IAccessorFactory accessorFactory) {
          final List<IDiagramElementAccessor> elements = new ArrayList<IDiagramElementAccessor>();
          return elements;
        }


      };

      EditorCell label = DiagramUtil.getCellIfNotEmpty(new Inline_Builder_ev57ah_a0a(editorContext, node).createCell());

      EditorCell editorCell = label;
      MyGraph rootGraph = DiagramCreationContext.getRootGraph();
      if (editorCell != null && rootGraph != null) {
        ElkLayouter layouter = (ElkLayouter) rootGraph.getRootDiagramModel().getLayouter();
        layouter.addLabelsStyle(editorCell.getStyle(), accessor.getId());
      }

      accessor.setLabelCell(label);

      diagramCell.value = new EditorCell_DiagramElement(editorContext, node, accessor);
      editorCell = diagramCell.value;
      editorCell.setCellId("DiagramConnector_ev57ah_a0");

      if (rootGraph != null) {
        ElkLayouter layouter = (ElkLayouter) rootGraph.getRootDiagramModel().getLayouter();
        layouter.addEdgesStyle(diagramCell.value.getStyle(), accessor.getId());
      }

      if (accessor.getLabelCell() != null) {
        diagramCell.value.addEditorCell(accessor.getLabelCell());
      }
      if (accessor.getStartRoleCell() != null) {
        diagramCell.value.addEditorCell(accessor.getStartRoleCell());
      }
      if (accessor.getEndRoleCell() != null) {
        diagramCell.value.addEditorCell(accessor.getEndRoleCell());
      }
    });

    return diagramCell.value;
  }
  private EditorCell createDiagramConnector_1() {
    return createDiagramConnector_0(getEditorContext(), myNode);
  }
  /*package*/ static class Inline_Builder_ev57ah_a0a extends AbstractEditorBuilder {
    @NotNull
    private SNode myNode;

    /*package*/ Inline_Builder_ev57ah_a0a(@NotNull EditorContext context, @NotNull SNode node) {
      super(context);
      myNode = node;
    }

    /*package*/ EditorCell createCell() {
      return createProperty_0();
    }

    @NotNull
    @Override
    public SNode getNode() {
      return myNode;
    }

    private EditorCell createProperty_0() {
      getCellFactory().pushCellContext();
      try {
        final SProperty property = PROPS.name$MnvL;
        getCellFactory().setPropertyInfo(new SPropertyInfo(myNode, property));
        EditorCell_Property editorCell = EditorCell_Property.create(getEditorContext(), new SPropertyAccessor(myNode, property, false, false), myNode);
        editorCell.setDefaultText("<no name>");
        editorCell.setCellId("property_name");
        editorCell.setSubstituteInfo(new SPropertySubstituteInfo(editorCell, property));
        setCellContext(editorCell);
        Iterable<SNode> propertyAttributes = SNodeOperations.ofConcept(new IAttributeDescriptor.AllAttributes().list(myNode), CONCEPTS.PropertyAttribute$Gb);
        Iterable<SNode> currentPropertyAttributes = Sequence.fromIterable(propertyAttributes).where((it) -> Objects.equals(PropertyAttribute__BehaviorDescriptor.getProperty_id1avfQ4BBzOo.invoke(it), property));
        if (Sequence.fromIterable(currentPropertyAttributes).isNotEmpty()) {
          EditorManager manager = EditorManager.getInstanceFromContext(getEditorContext());
          return manager.createNodeRoleAttributeCell(Sequence.fromIterable(currentPropertyAttributes).first(), AttributeKind.PROPERTY, editorCell);
        } else
        return editorCell;
      } finally {
        getCellFactory().popCellContext();
      }
    }
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink MemberEndSource$ycMx = MetaAdapterFactory.getContainmentLink(0xfd381d931dce4228L, 0xba53a4e0ecaf0da2L, 0x7dde76cdf7e6f65bL, 0x3a10628a5a4433d1L, "MemberEndSource");
    /*package*/ static final SReferenceLink MemberEnd$addv = MetaAdapterFactory.getReferenceLink(0xfd381d931dce4228L, 0xba53a4e0ecaf0da2L, 0x3a10628a5a4433cdL, 0x3a10628a5a4433d0L, "MemberEnd");
    /*package*/ static final SContainmentLink MemberEndTarget$yd1y = MetaAdapterFactory.getContainmentLink(0xfd381d931dce4228L, 0xba53a4e0ecaf0da2L, 0x7dde76cdf7e6f65bL, 0x3a10628a5a4433d2L, "MemberEndTarget");
  }

  private static final class CONCEPTS {
    /*package*/ static final SInterfaceConcept Classifier$z8 = MetaAdapterFactory.getInterfaceConcept(0xfd381d931dce4228L, 0xba53a4e0ecaf0da2L, 0x49e02d1c64bbe834L, "UDML.core.structure.Classifier");
    /*package*/ static final SConcept PropertyAttribute$Gb = MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2eb1ad060897da56L, "jetbrains.mps.lang.core.structure.PropertyAttribute");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
