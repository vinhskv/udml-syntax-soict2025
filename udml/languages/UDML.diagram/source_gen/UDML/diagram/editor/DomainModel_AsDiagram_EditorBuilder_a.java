package UDML.diagram.editor;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.descriptor.AbstractEditorBuilder;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Vertical;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import de.itemis.mps.editor.diagram.runtime.jgraph.BaseDiagramECell;
import de.itemis.mps.editor.diagram.runtime.EditorUtil;
import de.itemis.mps.editor.diagram.runtime.jgraph.DiagramCreationContext;
import de.itemis.mps.editor.diagram.runtime.DiagramContext;
import de.itemis.mps.editor.diagram.runtime.ContextVariables;
import de.itemis.mps.editor.diagram.runtime.model.DiagramModel;
import de.itemis.mps.editor.diagram.runtime.model.EndpointUtil;
import de.itemis.mps.editor.diagram.runtime.jgraph.ElkLayouter;
import de.itemis.mps.editor.diagram.runtime.jgraph.LayeredLayouter;
import org.eclipse.elk.core.options.Direction;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import de.itemis.mps.editor.diagram.runtime.model.IDiagramAccessor;
import de.itemis.mps.editor.diagram.runtime.model.AbstractDiagramAccessor;
import java.util.List;
import de.itemis.mps.editor.diagram.runtime.model.IDiagramElementAccessor;
import de.itemis.mps.editor.diagram.runtime.model.IAccessorFactory;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import de.itemis.mps.editor.diagram.runtime.shape.IShape;
import UDML.diagram.shapes.Shapes.ArrowHead;
import de.itemis.mps.editor.diagram.runtime.model.AbstractEdgeAccessor;
import de.itemis.mps.editor.diagram.runtime.model.IConnectionEndpoint_Internal;
import de.itemis.mps.editor.diagram.runtime.model.Box;
import de.itemis.mps.editor.diagram.runtime.model.IConnectionEndpointReference;
import org.jetbrains.annotations.Nullable;
import de.itemis.mps.editor.diagram.runtime.jgraph.MyGraph;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import de.itemis.mps.editor.diagram.runtime.model.IConnectionType;
import java.util.Collections;
import de.itemis.mps.editor.diagram.runtime.model.GeneratedConnectionType;
import de.itemis.mps.editor.diagram.runtime.model.IConnectionEndpoint;
import de.itemis.mps.editor.diagram.runtime.shape.EdgeIconShape;
import com.mxgraph.swing.mxGraphComponent;
import java.awt.Color;
import de.itemis.mps.editor.diagram.runtime.jgraph.MyGraphComponent;
import de.itemis.mps.editor.diagram.runtime.model.IPaletteEntryProvider;
import de.itemis.mps.editor.diagram.runtime.model.CompositePaletteEntryProvider;
import de.itemis.mps.editor.diagram.runtime.model.SubstituteInfoPaletteEntryProvider;
import de.itemis.mps.editor.diagram.runtime.substitute.SubstituteInfoFactory;
import de.itemis.mps.editor.diagram.runtime.jgraph.SubDiagramECell;
import de.itemis.mps.editor.diagram.runtime.jgraph.RootDiagramECell;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import jetbrains.mps.project.Project;
import jetbrains.mps.ide.project.ProjectHelper;
import de.itemis.mps.editor.diagram.runtime.jgraph.DiagramActionsUtil;
import jetbrains.mps.nodeEditor.cells.EditorCell_Component;
import de.itemis.mps.editor.diagram.runtime.jgraph.RootDCell;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.smodel.builder.SNodeBuilder;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SProperty;

/*package*/ class DomainModel_AsDiagram_EditorBuilder_a extends AbstractEditorBuilder {
  @NotNull
  private SNode myNode;

  public DomainModel_AsDiagram_EditorBuilder_a(@NotNull EditorContext context, @NotNull SNode node) {
    super(context);
    myNode = node;
  }

  @NotNull
  @Override
  public SNode getNode() {
    return myNode;
  }

  /*package*/ EditorCell createCell() {
    return createCollection_0();
  }

  private EditorCell createCollection_0() {
    EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Vertical());
    editorCell.setCellId("Collection_x5mbqa_a");
    editorCell.setBig(true);
    setCellContext(editorCell);
    editorCell.addEditorCell(createDiagram_1());
    editorCell.addEditorCell(createConstant_0());
    return editorCell;
  }
  private EditorCell createDiagram_0(final EditorContext editorContext, final SNode node) {
    final Wrappers._T<BaseDiagramECell> editorCell = new Wrappers._T<BaseDiagramECell>(null);
    final Wrappers._T<EditorCell> alternativeCell = new Wrappers._T<EditorCell>(null);

    EditorUtil.noCaching(editorContext, () -> {
      DiagramCreationContext.createDiagram(() -> {
        DiagramContext.withContext(node, () -> editorCell.value, () -> {
          ContextVariables.withValue("thisNode", node, () -> {
            final ContextVariables _variablesContext = ContextVariables.getCurrent();
            DiagramModel model = DiagramModel.getModel(editorContext, node, EndpointUtil.createAccessorKeyForSNode(((SNode) _variablesContext.getValue("thisNode"))));
            final ElkLayouter layouter = new LayeredLayouter(Direction.RIGHT);
            layouter.toggleConnectBoxesWithoutDummyPort(false);
            ((_FunctionTypes._void_P0_E0) () -> {
              // the closure is necessary so that we can declare the style variable again in the current scope
              Style style = new StyleImpl();
              layouter.setParentsStyle(style);
            }).invoke();


            IDiagramAccessor accessor = new AbstractDiagramAccessor(node) {
              public List<? extends IDiagramElementAccessor> getElements(IAccessorFactory accessorFactory) {
                final List<IDiagramElementAccessor> elements = new ArrayList<IDiagramElementAccessor>();
                for (SNode e : ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.element$Fly9))) {
                  elements.addAll(accessorFactory.fromSNode(e));
                }
                for (final SNode parameterObject : new Object() {
                  public Iterable<SNode> query() {
                    return SNodeOperations.ofConcept(SLinkOperations.collectMany(SNodeOperations.ofConcept(SLinkOperations.getChildren(((SNode) _variablesContext.getValue("thisNode")), LINKS.element$Fly9), CONCEPTS.Classifier$z8), LINKS.generalization$1M56), CONCEPTS.Generalization$ga);
                  }
                }.query()) {
                  ContextVariables.withParentAndValue(_variablesContext, "parameterObject", parameterObject, new Runnable() {
                    public void run() {
                      final ContextVariables _variablesContext = ContextVariables.getCurrent();
                      final EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, parameterObject);
                      editorCell.setCellId("transformedGraphElement_b0a" + "." + ((SNode) _variablesContext.getValue("parameterObject")));


                      final IShape startShape = null;
                      final IShape endShape = new ArrowHead(1.0, false);
                      AbstractEdgeAccessor accessor = new AbstractEdgeAccessor(EndpointUtil.createAccessorKeyForSNode(((SNode) _variablesContext.getValue("parameterObject")))) {
                        @Override
                        public void writeFrom(IConnectionEndpoint_Internal endpoint) {
                          writeFrom(EndpointUtil.getSNode(endpoint), EndpointUtil.getBox(endpoint), EndpointUtil.getPortName(endpoint));
                        }
                        public void writeFrom(final SNode targetNode, Box targetDNode, final String port) {
                        }
                        @Override
                        public void writeTo(IConnectionEndpoint_Internal endpoint) {
                          writeTo(EndpointUtil.getSNode(endpoint), EndpointUtil.getBox(endpoint), EndpointUtil.getPortName(endpoint));
                        }
                        public void writeTo(final SNode targetNode, Box targetDNode, final String port) {
                        }
                        @Override
                        public IConnectionEndpointReference readFrom() {
                          return EndpointUtil.createEndpointReferenceForNodeSafe(SNodeOperations.as(SLinkOperations.getTarget(((SNode) _variablesContext.getValue("parameterObject")), LINKS.specific$8Hga), CONCEPTS.Classifier$z8));
                        }
                        @Override
                        public IConnectionEndpointReference readTo() {
                          return EndpointUtil.createEndpointReferenceForNodeSafe(SNodeOperations.as(SLinkOperations.getTarget(((SNode) _variablesContext.getValue("parameterObject")), LINKS.general$EIBB), CONCEPTS.Classifier$z8));
                        }
                        @Override
                        public IShape getStartShape() {
                          return startShape;
                        }
                        @Override
                        public IShape getEndShape() {
                          return endShape;
                        }
                        @Override
                        public void delete() {
                        }
                        @Nullable
                        public SNode getSNode() {
                          return parameterObject;
                        }

                      };
                      accessor.setRootCell(editorCell);
                      MyGraph rootGraph = DiagramCreationContext.getRootGraph();
                      if (rootGraph != null) {
                        ElkLayouter layouter = (ElkLayouter) rootGraph.getRootDiagramModel().getLayouter();
                        layouter.addEdgesStyle(accessor.getStyle(), accessor.getId());
                        layouter.addLabelsStyle(accessor.getStyle(), accessor.getId());
                      }

                      elements.add(accessor);
                    }
                  });
                }
                return elements;
              }
              @Override
              public String getPaletteFolderForEntry(SAbstractConcept concept, SNode targetNode) {
                String Group = "";
                if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(concept), CONCEPTS.Class$vb) || SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(concept), CONCEPTS.DataType$pM)) {
                  Group = "Node";
                } else if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(concept), CONCEPTS.RelationShip$sf)) {
                  Group = "Relation";
                } else if (!(concept.isAbstract()) && SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(concept), CONCEPTS.Annotation$hG)) {
                  Group = "Annotation";
                  if (concept.getSuperConcept().getConceptAlias() != "") {
                    Group += "/" + concept.getSuperConcept().getConceptAlias();
                  } else {
                    Group += "/" + concept.getSuperConcept().getName();
                  }
                }
                String folder = Group;
                if (targetNode != null) {
                  // '/' represents a marker for creating sub-folders in the palette 
                  folder += "/" + SModelOperations.getModelName(SNodeOperations.getModel(targetNode));
                }
                return folder;
              }
              @Override
              public List<IConnectionType> getConnectionTypes() {
                List<IConnectionType> connectionTypes = new ArrayList<IConnectionType>();
                connectionTypes.addAll(Collections.singletonList(new GeneratedConnectionType() {
                  public String getName() {
                    return "generalization";
                  }
                  @Override
                  public void create(final IConnectionEndpoint from, final IConnectionEndpoint to) {
                    SNode fromNode = SNodeOperations.as(from.getSNode(), CONCEPTS.Classifier$z8);
                    SNode toNode = SNodeOperations.as(to.getSNode(), CONCEPTS.Classifier$z8);

                    ListSequence.fromList(SLinkOperations.getChildren(fromNode, LINKS.generalization$1M56)).addElement(createGeneralization_x5mbqa_a0a3a0a0a(fromNode, toNode));

                  }

                }));
                connectionTypes.addAll(Collections.singletonList(new GeneratedConnectionType() {
                  public String getName() {
                    return "association";
                  }
                  @Override
                  public void create(final IConnectionEndpoint from, final IConnectionEndpoint to) {
                    SNode fromNode = SNodeOperations.as(from.getSNode(), CONCEPTS.Classifier$z8);
                    SNode toNode = SNodeOperations.as(to.getSNode(), CONCEPTS.Classifier$z8);

                    ListSequence.fromList(SLinkOperations.getChildren(((SNode) _variablesContext.getValue("thisNode")), LINKS.element$Fly9)).addElement(createAssociation_x5mbqa_a0a3a0b0a(fromNode, toNode));
                  }

                  @Override
                  protected IShape getIconShape() {
                    return new EdgeIconShape(new ArrowHead(0.5, false), new ArrowHead(0.5, true));
                  }
                }));
                connectionTypes.addAll(Collections.singletonList(new GeneratedConnectionType() {
                  public String getName() {
                    return "composition";
                  }
                  @Override
                  public void create(final IConnectionEndpoint from, final IConnectionEndpoint to) {
                    SNode fromNode = SNodeOperations.as(from.getSNode(), CONCEPTS.Classifier$z8);
                    SNode toNode = SNodeOperations.as(to.getSNode(), CONCEPTS.Classifier$z8);

                    ListSequence.fromList(SLinkOperations.getChildren(((SNode) _variablesContext.getValue("thisNode")), LINKS.element$Fly9)).addElement(createComposition_x5mbqa_a0a3a0c0a(fromNode, toNode));
                  }

                }));
                connectionTypes.addAll(Collections.singletonList(new GeneratedConnectionType() {
                  public String getName() {
                    return "Aggregation";
                  }
                  @Override
                  public void create(final IConnectionEndpoint from, final IConnectionEndpoint to) {
                    SNode fromNode = SNodeOperations.as(from.getSNode(), CONCEPTS.Classifier$z8);
                    SNode toNode = SNodeOperations.as(to.getSNode(), CONCEPTS.Classifier$z8);

                    ListSequence.fromList(SLinkOperations.getChildren(((SNode) _variablesContext.getValue("thisNode")), LINKS.element$Fly9)).addElement(createAggregation_x5mbqa_a0a3a0d0a(fromNode, toNode));
                  }

                }));
                connectionTypes.addAll(Collections.singletonList(new GeneratedConnectionType() {
                  public String getName() {
                    return "Annotation";
                  }
                  @Override
                  public boolean canCreate(final IConnectionEndpoint from, final IConnectionEndpoint to, final List<String> reasons) {
                    return SNodeOperations.isInstanceOf(from.getSNode(), CONCEPTS.Classifier$z8);
                  }
                  @Override
                  public void create(final IConnectionEndpoint from, final IConnectionEndpoint to) {
                    SNode fromNode = SNodeOperations.as(from.getSNode(), CONCEPTS.Classifier$z8);
                    SNode toNode = SNodeOperations.as(to.getSNode(), CONCEPTS.Classifier$z8);

                    ListSequence.fromList(SLinkOperations.getChildren(fromNode, LINKS.annotation$$U4c)).addElement(createRefAnnotation_x5mbqa_a0a3a0e0a(SNodeOperations.as(toNode, CONCEPTS.Annotation$hG)));
                  }

                }));
                return connectionTypes;
              }





















              @Override
              public boolean runAutoLayoutOnInit() {
                boolean autoLayoutFlag = false;
                return autoLayoutFlag;
              }

              @Override
              public boolean runAutoLayoutOnChange() {
                boolean autoLayoutFlag = false;
                return autoLayoutFlag;
              }

              @Override
              public boolean fitToSizeOnInit() {
                boolean fitToSize = false;
                return fitToSize;
              }

              @Override
              public boolean disableNodeEditing() {
                boolean disableEditing = false;
                return disableEditing;
              }

              @Override
              public boolean syncWithModelOnlyOnOpening() {
                boolean flag = false;
                return flag;
              }

              @Override
              public boolean allowElementsToBeBelowRequiredSize() {
                boolean flag = false;
                return flag;
              }

              @Override
              public boolean showGrid() {
                boolean flag = false;
                return flag;
              }

              @Override
              public int getGridSize() {
                int size = 10;
                return size;
              }


              @Override
              public int getGridStyle() {
                try {
                  return mxGraphComponent.class.getDeclaredField("GRID_STYLE_DOT").getInt(null);
                } catch (Exception ex) {
                  return 0;
                }
              }

              @Override
              public Color getGridColor() {
                Color color = null;
                return color;
              }

              @Override
              public boolean useGridSnapping() {
                boolean flag = false;
                return flag;
              }


              @Override
              public double getArrowKeyMoveAmount() {
                double amount = MyGraphComponent.DEFAULT_ARROW_KEY_MOVE_AMOUNT;
                return amount;
              }

              @Override
              public double getArrowKeyMoveAmountSlow() {
                double amount = MyGraphComponent.DEFAULT_ARROW_KEY_MOVE_AMOUNT_SLOW;
                return amount;
              }

              @Override
              public double getPanAmount() {
                double amount = MyGraphComponent.DEFAULT_PAN_AMOUNT;
                return amount;
              }

              @Override
              public double getPanAmountSlow() {
                double amount = MyGraphComponent.DEFAULT_PAN_AMOUNT_SLOW;
                return amount;
              }

              @Override
              public double getMinimumScale() {
                double scale = MyGraphComponent.DEFAULT_MINIMUM_SCALE;
                return scale;
              }
            };

            model.setDiagramAccessor(accessor);

            IPaletteEntryProvider paletteEntryProvider = new CompositePaletteEntryProvider(new SubstituteInfoPaletteEntryProvider(new SubstituteInfoFactory(editorContext, node).forChildLink(node, SLinkOperations.findLinkDeclaration(LINKS.element$Fly9))), new SubstituteInfoPaletteEntryProvider(new SubstituteInfoFactory(editorContext, node).forChildLink(node, SLinkOperations.findLinkDeclaration(LINKS.concern$FlLa))));
            model.setPaletteEntryProvider(paletteEntryProvider);

            if (DiagramCreationContext.isSubdiagram()) {
              editorCell.value = new SubDiagramECell(editorContext, node, model);
            } else {
              editorCell.value = new RootDiagramECell(editorContext, node, model);
              RootDiagramECell rootCell = (RootDiagramECell) editorCell.value;
              if (rootCell.showInViewer()) {
                JButton openedInViewer = new JButton("open diagram in editor");
                openedInViewer.setOpaque(false);
                openedInViewer.addActionListener(new ActionListener() {
                  @Override
                  public void actionPerformed(ActionEvent e) {
                    Project mpsProject = ProjectHelper.getProject(editorContext.getRepository());
                    if (mpsProject == null) {
                      return;
                    }
                    com.intellij.openapi.project.Project ideaProject = ProjectHelper.toIdeaProject(mpsProject);
                    if (ideaProject == null) {
                      return;
                    }

                    DiagramActionsUtil.updateViewer(ideaProject, rootCell, editorContext.getEditorComponent());
                  }
                });
                alternativeCell.value = new EditorCell_Component(editorContext, node, openedInViewer);
                return;
              }
              rootCell.runAutoLayouterOnInit(node, accessor.runAutoLayoutOnInit());
              rootCell.fitToSizeOnInit(node, accessor.fitToSizeOnInit());
              if (accessor.disableNodeEditing()) {
                rootCell.getGraph().getGraphComponent().getCellEditor().setDisabled(true);
              }
            }
            editorCell.value.setCellId("Diagram_x5mbqa_a0");

            if (editorCell.value.getContextGraph() != null) {
              Object defaultParent = editorCell.value.getContextGraph().getDefaultParent();
              if (defaultParent instanceof RootDCell) {
                RootDCell rootDCell = ((RootDCell) defaultParent);
                rootDCell.resetButtonConfig();
              }
            }
          });
        });
      });
    });


    if (alternativeCell.value != null) {
      return alternativeCell.value;
    }
    return editorCell.value;
  }
  private EditorCell createDiagram_1() {
    return createDiagram_0(getEditorContext(), myNode);
  }
  private EditorCell createConstant_0() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "");
    editorCell.setCellId("Constant_x5mbqa_b0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private static SNode createGeneralization_x5mbqa_a0a3a0a0a(SNode p0, SNode p1) {
    SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.Generalization$ga);
    n0.setReferenceTarget(LINKS.specific$8Hga, p0);
    n0.setReferenceTarget(LINKS.general$EIBB, p1);
    return n0.getResult();
  }
  private static SNode createAssociation_x5mbqa_a0a3a0b0a(SNode p0, SNode p1) {
    SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.Association$ce);
    {
      SNodeBuilder n1 = n0.forChild(LINKS.MemberEndSource$ycMx).init(CONCEPTS.MemberEnd$6e);
      n1.setProperty(PROPS.name$MnvL, "as");
      n1.setProperty(PROPS.role$acYu, "1");
      n1.setReferenceTarget(LINKS.MemberEnd$addv, p0);
    }
    {
      SNodeBuilder n2 = n0.forChild(LINKS.MemberEndTarget$yd1y).init(CONCEPTS.MemberEnd$6e);
      n2.setProperty(PROPS.name$MnvL, "1");
      n2.setProperty(PROPS.role$acYu, "1");
      n2.setReferenceTarget(LINKS.MemberEnd$addv, p1);
    }
    return n0.getResult();
  }
  private static SNode createComposition_x5mbqa_a0a3a0c0a(SNode p0, SNode p1) {
    SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.Composition$Lf);
    {
      SNodeBuilder n1 = n0.forChild(LINKS.MemberEndSource$ycMx).init(CONCEPTS.MemberEnd$6e);
      n1.setProperty(PROPS.name$MnvL, "as");
      n1.setProperty(PROPS.role$acYu, "1");
      n1.setReferenceTarget(LINKS.MemberEnd$addv, p0);
    }
    {
      SNodeBuilder n2 = n0.forChild(LINKS.MemberEndTarget$yd1y).init(CONCEPTS.MemberEnd$6e);
      n2.setProperty(PROPS.name$MnvL, "1");
      n2.setProperty(PROPS.role$acYu, "1");
      n2.setReferenceTarget(LINKS.MemberEnd$addv, p1);
    }
    return n0.getResult();
  }
  private static SNode createAggregation_x5mbqa_a0a3a0d0a(SNode p0, SNode p1) {
    SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.Aggregation$XG);
    {
      SNodeBuilder n1 = n0.forChild(LINKS.MemberEndSource$ycMx).init(CONCEPTS.MemberEnd$6e);
      n1.setProperty(PROPS.name$MnvL, "as");
      n1.setProperty(PROPS.role$acYu, "1");
      n1.setReferenceTarget(LINKS.MemberEnd$addv, p0);
    }
    {
      SNodeBuilder n2 = n0.forChild(LINKS.MemberEndTarget$yd1y).init(CONCEPTS.MemberEnd$6e);
      n2.setProperty(PROPS.name$MnvL, "1");
      n2.setProperty(PROPS.role$acYu, "1");
      n2.setReferenceTarget(LINKS.MemberEnd$addv, p1);
    }
    return n0.getResult();
  }
  private static SNode createRefAnnotation_x5mbqa_a0a3a0e0a(SNode p0) {
    SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.RefAnnotation$5Z);
    n0.setReferenceTarget(LINKS.Annotation$Pkrw, p0);
    return n0.getResult();
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink element$Fly9 = MetaAdapterFactory.getContainmentLink(0xfd381d931dce4228L, 0xba53a4e0ecaf0da2L, 0x49e02d1c64bbe830L, 0x49e02d1c64bbe832L, "element");
    /*package*/ static final SReferenceLink specific$8Hga = MetaAdapterFactory.getReferenceLink(0xfd381d931dce4228L, 0xba53a4e0ecaf0da2L, 0x49e02d1c64bbef75L, 0x49e02d1c64bbef78L, "specific");
    /*package*/ static final SReferenceLink general$EIBB = MetaAdapterFactory.getReferenceLink(0xfd381d931dce4228L, 0xba53a4e0ecaf0da2L, 0x49e02d1c64bbef75L, 0x2599e98ad164bdfL, "general");
    /*package*/ static final SContainmentLink generalization$1M56 = MetaAdapterFactory.getContainmentLink(0xfd381d931dce4228L, 0xba53a4e0ecaf0da2L, 0x49e02d1c64bbe834L, 0x49e02d1c64bbef76L, "generalization");
    /*package*/ static final SContainmentLink annotation$$U4c = MetaAdapterFactory.getContainmentLink(0xfd381d931dce4228L, 0xba53a4e0ecaf0da2L, 0x49e02d1c64bbe822L, 0x1802c6e79a24d4d1L, "annotation");
    /*package*/ static final SContainmentLink concern$FlLa = MetaAdapterFactory.getContainmentLink(0xfd381d931dce4228L, 0xba53a4e0ecaf0da2L, 0x49e02d1c64bbe830L, 0x49e02d1c64bbe833L, "concern");
    /*package*/ static final SContainmentLink MemberEndSource$ycMx = MetaAdapterFactory.getContainmentLink(0xfd381d931dce4228L, 0xba53a4e0ecaf0da2L, 0x7dde76cdf7e6f65bL, 0x3a10628a5a4433d1L, "MemberEndSource");
    /*package*/ static final SReferenceLink MemberEnd$addv = MetaAdapterFactory.getReferenceLink(0xfd381d931dce4228L, 0xba53a4e0ecaf0da2L, 0x3a10628a5a4433cdL, 0x3a10628a5a4433d0L, "MemberEnd");
    /*package*/ static final SContainmentLink MemberEndTarget$yd1y = MetaAdapterFactory.getContainmentLink(0xfd381d931dce4228L, 0xba53a4e0ecaf0da2L, 0x7dde76cdf7e6f65bL, 0x3a10628a5a4433d2L, "MemberEndTarget");
    /*package*/ static final SReferenceLink Annotation$Pkrw = MetaAdapterFactory.getReferenceLink(0xfd381d931dce4228L, 0xba53a4e0ecaf0da2L, 0x1802c6e79a24c14fL, 0x1802c6e79a24c25bL, "Annotation");
  }

  private static final class CONCEPTS {
    /*package*/ static final SInterfaceConcept Classifier$z8 = MetaAdapterFactory.getInterfaceConcept(0xfd381d931dce4228L, 0xba53a4e0ecaf0da2L, 0x49e02d1c64bbe834L, "UDML.core.structure.Classifier");
    /*package*/ static final SConcept Generalization$ga = MetaAdapterFactory.getConcept(0xfd381d931dce4228L, 0xba53a4e0ecaf0da2L, 0x49e02d1c64bbef75L, "UDML.core.structure.Generalization");
    /*package*/ static final SConcept DataType$pM = MetaAdapterFactory.getConcept(0xfd381d931dce4228L, 0xba53a4e0ecaf0da2L, 0x49e02d1c64bbefa4L, "UDML.core.structure.DataType");
    /*package*/ static final SConcept Class$vb = MetaAdapterFactory.getConcept(0xfd381d931dce4228L, 0xba53a4e0ecaf0da2L, 0x49e02d1c64bbef7fL, "UDML.core.structure.Class");
    /*package*/ static final SInterfaceConcept RelationShip$sf = MetaAdapterFactory.getInterfaceConcept(0xfd381d931dce4228L, 0xba53a4e0ecaf0da2L, 0x7dde76cdf7e6f65bL, "UDML.core.structure.RelationShip");
    /*package*/ static final SInterfaceConcept Annotation$hG = MetaAdapterFactory.getInterfaceConcept(0xfd381d931dce4228L, 0xba53a4e0ecaf0da2L, 0x49e02d1c64bbe825L, "UDML.core.structure.Annotation");
    /*package*/ static final SConcept Association$ce = MetaAdapterFactory.getConcept(0xfd381d931dce4228L, 0xba53a4e0ecaf0da2L, 0x49e02d1c64bbef9dL, "UDML.core.structure.Association");
    /*package*/ static final SConcept MemberEnd$6e = MetaAdapterFactory.getConcept(0xfd381d931dce4228L, 0xba53a4e0ecaf0da2L, 0x3a10628a5a4433cdL, "UDML.core.structure.MemberEnd");
    /*package*/ static final SConcept Composition$Lf = MetaAdapterFactory.getConcept(0xfd381d931dce4228L, 0xba53a4e0ecaf0da2L, 0x7dde76cdf80bb07aL, "UDML.core.structure.Composition");
    /*package*/ static final SConcept Aggregation$XG = MetaAdapterFactory.getConcept(0xfd381d931dce4228L, 0xba53a4e0ecaf0da2L, 0x7dde76cdf827246aL, "UDML.core.structure.Aggregation");
    /*package*/ static final SConcept RefAnnotation$5Z = MetaAdapterFactory.getConcept(0xfd381d931dce4228L, 0xba53a4e0ecaf0da2L, 0x1802c6e79a24c14fL, "UDML.core.structure.RefAnnotation");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
    /*package*/ static final SProperty role$acYu = MetaAdapterFactory.getProperty(0xfd381d931dce4228L, 0xba53a4e0ecaf0da2L, 0x3a10628a5a4433cdL, 0x3a10628a5a4433cfL, "role");
  }
}
