package UDML.diagram.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import jetbrains.mps.openapi.editor.descriptor.EditorHintsProvider;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorHint;
import java.util.Arrays;
import jetbrains.mps.editor.runtime.descriptor.ConceptEditorHintImpl;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase implements EditorHintsProvider {
  private Collection<ConceptEditorHint> myHints = Arrays.<ConceptEditorHint>asList(new ConceptEditorHintImpl("AsDiagram", "as diagram", true, "UDML.diagram.editor.diagram.AsDiagram"));
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new Aggregation_AsDiagram_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new Association_AsDiagram_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new Class_AsDiagram_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new Composition_AsDiagram_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new DomainModel_AsDiagram_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new Operation_AsDiagram_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new Parameter_AsDiagram_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new Property_AsDiagram_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new RelationShip_AsDiagram_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }

  public Collection<ConceptEditorHint> getHints() {
    return myHints;
  }


  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xfd381d931dce4228L, 0xba53a4e0ecaf0da2L, 0x7dde76cdf827246aL), MetaIdFactory.conceptId(0xfd381d931dce4228L, 0xba53a4e0ecaf0da2L, 0x49e02d1c64bbef9dL), MetaIdFactory.conceptId(0xfd381d931dce4228L, 0xba53a4e0ecaf0da2L, 0x49e02d1c64bbef7fL), MetaIdFactory.conceptId(0xfd381d931dce4228L, 0xba53a4e0ecaf0da2L, 0x7dde76cdf80bb07aL), MetaIdFactory.conceptId(0xfd381d931dce4228L, 0xba53a4e0ecaf0da2L, 0x49e02d1c64bbe830L), MetaIdFactory.conceptId(0xfd381d931dce4228L, 0xba53a4e0ecaf0da2L, 0x49e02d1c64bbef87L), MetaIdFactory.conceptId(0xfd381d931dce4228L, 0xba53a4e0ecaf0da2L, 0x49e02d1c64bbef94L), MetaIdFactory.conceptId(0xfd381d931dce4228L, 0xba53a4e0ecaf0da2L, 0x49e02d1c64bbef86L), MetaIdFactory.conceptId(0xfd381d931dce4228L, 0xba53a4e0ecaf0da2L, 0x7dde76cdf7e6f65bL)).seal();
}
